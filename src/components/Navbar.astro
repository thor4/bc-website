---
import Button from './Button.astro';

const currentPath = Astro.url.pathname;

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Articles', href: '/articles' },
  { name: 'Projects', href: '/projects' },
  { name: 'About', href: '/about' },
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-[var(--color-bg-primary)]/95 backdrop-blur-sm border-b border-[var(--color-border)]">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Brand -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2 text-[var(--color-text-primary)] hover:text-[var(--color-accent)] transition-colors duration-200">
          <svg class="w-8 h-8" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="32" height="32" rx="8" fill="var(--color-accent)"/>
            <path d="M8 12h16M8 16h16M8 20h10" stroke="white" stroke-width="2" stroke-linecap="round"/>
          </svg>
          <span class="font-semibold text-lg">Bryan Conklin</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`font-medium transition-colors duration-200 hover:text-[var(--color-accent)] ${
              currentPath === item.href 
                ? 'text-[var(--color-accent)]' 
                : 'text-[var(--color-text-secondary)]'
            }`}
          >
            {item.name}
          </a>
        ))}
        <Button variant="outline" size="sm" href="/contact">
          Get in Touch
        </Button>
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button
          type="button"
          class="text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] focus:outline-none focus:text-[var(--color-text-primary)] transition-colors duration-200"
          aria-label="Open main menu"
          id="mobile-menu-button"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="px-2 pt-2 pb-3 space-y-1 bg-[var(--color-bg-secondary)] rounded-lg mt-2 border border-[var(--color-border)]">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 hover:text-[var(--color-accent)] hover:bg-[var(--color-bg-tertiary)] ${
              currentPath === item.href 
                ? 'text-[var(--color-accent)] bg-[var(--color-bg-tertiary)]' 
                : 'text-[var(--color-text-secondary)]'
            }`}
          >
            {item.name}
          </a>
        ))}
        <div class="px-3 py-2">
          <Button variant="outline" size="sm" href="/contact" class="w-full">
            Get in Touch
          </Button>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Add top padding to body to account for fixed navbar -->
<style>
  body {
    padding-top: 4rem;
  }
</style>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    
    if (button && menu) {
      button.addEventListener('click', () => {
        menu.classList.toggle('hidden');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target as Node) && !menu.contains(e.target as Node)) {
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>